/* mongo.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Mongo", gir_namespace = "Mongo", gir_version = "1.0", lower_case_cprefix = "mongo_")]
namespace Mongo {
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", ref_function = "mongo_bson_ref", type_id = "mongo_bson_get_type ()", unref_function = "mongo_bson_unref")]
	[Compact]
	public class Bson {
		public uint8 data;
		public uint len;
		[CCode (has_construct_function = false)]
		public Bson ();
		public void append_array (string key, Mongo.Bson value);
		public void append_boolean (string key, bool value);
		public void append_bson (string key, Mongo.Bson value);
		public void append_date_time (string key, GLib.DateTime value);
		public void append_double (string key, double value);
		public void append_int (string key, int32 value);
		public void append_int64 (string key, int64 value);
		public void append_null (string key);
		public void append_object_id (string key, Mongo.ObjectId object_id);
		public void append_regex (string key, string regex, string options);
		public void append_string (string key, string? value);
		public void append_timeval (string key, GLib.TimeVal value);
		public void append_undefined (string key);
		public Mongo.Bson dup ();
		[CCode (has_construct_function = false)]
		public Bson.empty ();
		[CCode (has_construct_function = false)]
		public Bson.from_data ([CCode (array_length_cname = "length", array_length_pos = 1.1, array_length_type = "gsize")] uint8[] buffer);
		public bool get_empty ();
		public void join (Mongo.Bson other);
		public Mongo.Bson @ref ();
		[CCode (has_construct_function = false)]
		public Bson.take_data (uint8 buffer, size_t length);
		public string to_string (bool is_array);
		public void unref ();
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_bson_stream_get_type ()")]
	public class BsonStream : GLib.Object {
		[CCode (has_construct_function = false)]
		public BsonStream ();
		public static GLib.Quark error_quark ();
		public bool load_from_channel (GLib.IOChannel channel) throws GLib.Error;
		public bool load_from_file (GLib.File file, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public Mongo.Bson next ();
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_client_get_type ()")]
	public class Client : GLib.Object {
		[CCode (has_construct_function = false)]
		public Client ();
		public static GLib.Quark error_quark ();
		[CCode (has_construct_function = false)]
		public Client.from_stream (GLib.IOStream stream);
		[CCode (has_construct_function = false)]
		public Client.from_uri (string uri);
		public bool send (Mongo.Message message, Mongo.WriteConcern? concern, out Mongo.Message reply, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool send_async (Mongo.Message message, Mongo.WriteConcern? concern, GLib.Cancellable? cancellable) throws GLib.Error;
		[NoAccessorMethod]
		public GLib.MainContext async_context { owned get; construct; }
		public GLib.IOStream stream { construct; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", ref_function = "mongo_client_context_ref", type_id = "mongo_client_context_get_type ()", unref_function = "mongo_client_context_unref")]
	[Compact]
	public class ClientContext {
		public string get_uri ();
		public Mongo.ClientContext @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_collection_get_type ()")]
	public class Collection : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Collection ();
		public async bool count_async (Mongo.Bson? query, GLib.Cancellable? cancellable, out uint64 count) throws GLib.Error;
		public async bool delete_async (Mongo.Bson selector, Mongo.DeleteFlags flags, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool drop_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public Mongo.Cursor find (Mongo.Bson query, Mongo.Bson? field_selector, uint skip, uint limit, Mongo.QueryFlags flags);
		public async Mongo.Bson find_one_async (Mongo.Bson? query, Mongo.Bson? field_selector, Mongo.QueryFlags flags, GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned Mongo.Connection get_connection ();
		public unowned Mongo.Database get_database ();
		public async bool insert_async (Mongo.Bson documents, size_t n_documents, Mongo.InsertFlags flags, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool update_async (Mongo.Bson selector, Mongo.Bson update, Mongo.UpdateFlags flags, GLib.Cancellable? cancellable) throws GLib.Error;
		public Mongo.Connection connection { get; construct; }
		public Mongo.Database database { get; construct; }
		[NoAccessorMethod]
		public string name { owned get; construct; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_connection_get_type ()")]
	public class Connection : GLib.Object {
		[CCode (has_construct_function = false)]
		public Connection ();
		public async Mongo.MessageReply command_async (string db, Mongo.Bson command, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool delete_async (string db_and_collection, Mongo.DeleteFlags flags, Mongo.Bson selector, GLib.Cancellable? cancellable) throws GLib.Error;
		public static GLib.Quark error_quark ();
		[CCode (has_construct_function = false)]
		public Connection.from_uri (string? uri);
		public unowned Mongo.Database get_database (string name);
		public bool get_slave_okay ();
		public async Mongo.MessageReply getmore_async (string db_and_collection, uint32 limit, uint64 cursor_id, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool insert_async (string db_and_collection, Mongo.InsertFlags flags, [CCode (array_length_cname = "n_documents", array_length_pos = 3.5, array_length_type = "gsize")] Mongo.Bson[] documents, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool kill_cursors_async ([CCode (array_length_cname = "n_cursors", array_length_pos = 1.5, array_length_type = "gsize")] uint64[] cursors, GLib.Cancellable? cancellable) throws GLib.Error;
		public async Mongo.MessageReply query_async (string db_and_collection, Mongo.QueryFlags flags, uint32 skip, uint32 limit, Mongo.Bson? query, Mongo.Bson? field_selector, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_slave_okay (bool slave_okay);
		public async bool update_async (string db_and_collection, Mongo.UpdateFlags flags, Mongo.Bson? selector, Mongo.Bson update, GLib.Cancellable? cancellable, out Mongo.Bson document) throws GLib.Error;
		[NoAccessorMethod]
		public string replica_set { owned get; set; }
		public bool slave_okay { get; set; }
		[NoAccessorMethod]
		public string uri { owned get; construct; }
		public signal void connected ();
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_cursor_get_type ()")]
	public class Cursor : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Cursor ();
		public async bool close_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool count_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool foreach_async ([CCode (delegate_target_pos = 1.33333, destroy_notify_pos = 1.66667)] owned Mongo.CursorCallback foreach_func, GLib.Cancellable? cancellable) throws GLib.Error;
		public uint get_batch_size ();
		public unowned string get_collection ();
		public unowned Mongo.Bson get_fields ();
		public Mongo.QueryFlags get_flags ();
		public uint get_limit ();
		public unowned Mongo.Bson get_query ();
		public uint get_skip ();
		public void set_batch_size (uint batch_size);
		public uint batch_size { get; set; }
		public string collection { get; construct; }
		[NoAccessorMethod]
		public Mongo.Connection connection { owned get; construct; }
		[NoAccessorMethod]
		public string database { owned get; construct; }
		public Mongo.Bson fields { get; construct; }
		public uint flags { get; construct; }
		public uint limit { get; construct; }
		public Mongo.Bson query { get; construct; }
		public uint skip { get; construct; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_database_get_type ()")]
	public class Database : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Database ();
		public async bool drop_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public unowned Mongo.Collection get_collection (string name);
		public unowned Mongo.Connection get_connection ();
		public unowned string get_name ();
		public Mongo.Connection connection { get; construct; }
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_input_stream_get_type ()")]
	public class InputStream : GLib.FilterInputStream {
		[CCode (has_construct_function = false)]
		public InputStream (GLib.InputStream base_stream);
		public static GLib.Quark error_quark ();
		public Mongo.Message read_message (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async Mongo.Message read_message_async (GLib.Cancellable? cancellable) throws GLib.Error;
		[NoAccessorMethod]
		public GLib.MainContext async_context { owned get; construct; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", ref_function = "mongo_manager_ref", type_id = "mongo_manager_get_type ()", unref_function = "mongo_manager_unref")]
	[Compact]
	public class Manager {
		[CCode (has_construct_function = false)]
		public Manager ();
		public void add_host (string host);
		public void add_seed (string seed);
		public void clear_hosts ();
		public void clear_seeds ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_hosts ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_seeds ();
		public unowned string next (out uint delay);
		public Mongo.Manager @ref ();
		public void remove_host (string host);
		public void remove_seed (string seed);
		public void reset_delay ();
		public void unref ();
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_message_get_type ()")]
	public abstract class Message : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Message ();
		public static GLib.Quark error_quark ();
		public unowned Mongo.Message get_reply ();
		public int get_request_id ();
		public int get_response_to ();
		public virtual bool load_from_data (uint8 data, size_t length);
		public virtual GLib.Bytes save_to_bytes () throws GLib.Error;
		public virtual uint8 save_to_data (size_t length);
		public void set_reply (Mongo.Message reply);
		public void set_reply_bson (Mongo.ReplyFlags flags, Mongo.Bson bson);
		public void set_request_id (int request_id);
		public void set_response_to (int response_to);
		public int request_id { get; set; }
		public int response_to { get; set; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_message_delete_get_type ()")]
	public class MessageDelete : Mongo.Message {
		[CCode (has_construct_function = false)]
		protected MessageDelete ();
		[NoAccessorMethod]
		public string collection { owned get; set; }
		[NoAccessorMethod]
		public Mongo.DeleteFlags flags { get; set; }
		[NoAccessorMethod]
		public Mongo.Bson query { owned get; set; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_message_getmore_get_type ()")]
	public class MessageGetmore : Mongo.Message {
		[CCode (has_construct_function = false)]
		protected MessageGetmore ();
		[NoAccessorMethod]
		public string collection { owned get; set; }
		[NoAccessorMethod]
		public uint64 cursor_id { get; set; }
		[NoAccessorMethod]
		public uint limit { get; set; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_message_insert_get_type ()")]
	public class MessageInsert : Mongo.Message {
		[CCode (has_construct_function = false)]
		protected MessageInsert ();
		public unowned string get_collection ();
		public unowned GLib.List<Mongo.Bson> get_documents ();
		public Mongo.InsertFlags get_flags ();
		public void set_collection (string collection);
		public void set_documents (GLib.List<Mongo.Bson> documents);
		public void set_flags (Mongo.InsertFlags flags);
		public string collection { get; set; }
		public Mongo.InsertFlags flags { get; set; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_message_kill_cursors_get_type ()")]
	public class MessageKillCursors : Mongo.Message {
		[CCode (has_construct_function = false)]
		protected MessageKillCursors ();
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_message_msg_get_type ()")]
	public class MessageMsg : Mongo.Message {
		[CCode (has_construct_function = false)]
		protected MessageMsg ();
		[NoAccessorMethod]
		public string message { owned get; set; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_message_query_get_type ()")]
	public class MessageQuery : Mongo.Message {
		[CCode (has_construct_function = false)]
		protected MessageQuery ();
		public unowned string get_collection ();
		public unowned string get_command_name ();
		public Mongo.QueryFlags get_flags ();
		public uint get_limit ();
		public unowned Mongo.Bson get_query ();
		public unowned Mongo.Bson get_selector ();
		public uint get_skip ();
		public bool is_command ();
		public void set_collection (string collection);
		public void set_fields (Mongo.Bson fields);
		public void set_flags (Mongo.QueryFlags flags);
		public void set_limit (uint limit);
		public void set_query (Mongo.Bson bson);
		public void set_skip (uint skip);
		public void take_fields (Mongo.Bson fields);
		public void take_query (Mongo.Bson bson);
		public string collection { get; set; }
		[NoAccessorMethod]
		public Mongo.Bson fields { owned get; set; }
		public Mongo.QueryFlags flags { get; set; }
		public uint limit { get; set; }
		public Mongo.Bson query { get; set; }
		public uint skip { get; set; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_message_reply_get_type ()")]
	public class MessageReply : Mongo.Message {
		[CCode (has_construct_function = false)]
		protected MessageReply ();
		public size_t get_count ();
		public uint64 get_cursor_id ();
		public unowned GLib.List<Mongo.Bson> get_documents ();
		public Mongo.ReplyFlags get_flags ();
		public uint get_offset ();
		public void set_cursor_id (uint64 cursor_id);
		public void set_documents (GLib.List<Mongo.Bson> documents);
		public void set_flags (Mongo.ReplyFlags flags);
		public void set_offset (uint offset);
		public uint count { get; }
		public uint64 cursor_id { get; set; }
		public Mongo.ReplyFlags flags { get; set; }
		public uint offset { get; set; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_message_update_get_type ()")]
	public class MessageUpdate : Mongo.Message {
		[CCode (has_construct_function = false)]
		protected MessageUpdate ();
		[NoAccessorMethod]
		public string collection { owned get; set; }
		[NoAccessorMethod]
		public Mongo.UpdateFlags flags { get; set; }
		[NoAccessorMethod]
		public Mongo.Bson query { owned get; set; }
		[NoAccessorMethod]
		public Mongo.Bson update { owned get; set; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "mongo_object_id_get_type ()")]
	[Compact]
	public class ObjectId {
		[CCode (has_construct_function = false)]
		public ObjectId ();
		public int compare (Mongo.ObjectId other);
		public Mongo.ObjectId copy ();
		public bool equal (Mongo.ObjectId v2);
		public void free ();
		[CCode (has_construct_function = false)]
		public ObjectId.from_data ([CCode (array_length = false)] uint8[] bytes);
		[CCode (has_construct_function = false)]
		public ObjectId.from_string (string string);
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		public unowned uint8[] get_data ();
		public GLib.TimeVal get_timeval ();
		public uint hash ();
		public string to_string ();
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_output_stream_get_type ()")]
	public class OutputStream : GLib.FilterOutputStream {
		[CCode (has_construct_function = false)]
		public OutputStream (GLib.OutputStream base_stream);
		public static GLib.Quark error_quark ();
		public bool write_message (Mongo.Message message, Mongo.WriteConcern concern, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool write_message_async (Mongo.Message message, Mongo.WriteConcern concern, GLib.Cancellable? cancellable) throws GLib.Error;
		[NoAccessorMethod]
		public GLib.MainContext async_context { owned get; construct; }
		[NoAccessorMethod]
		public int next_request_id { get; construct; }
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_protocol_get_type ()")]
	public class Protocol : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Protocol ();
		public async bool delete_async (string db_and_collection, Mongo.DeleteFlags flags, Mongo.Bson selector, GLib.Cancellable? cancellable) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public void fail (GLib.Error error);
		public void flush_sync ();
		public unowned GLib.IOStream get_io_stream ();
		public async Mongo.MessageReply getmore_async (string db_and_collection, uint32 limit, uint64 cursor_id, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool insert_async (string db_and_collection, Mongo.InsertFlags flags, Mongo.Bson documents, size_t n_documents, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool kill_cursors_async (uint64 cursors, size_t n_cursors, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool msg_async (string message, GLib.Cancellable? cancellable) throws GLib.Error;
		public async Mongo.MessageReply query_async (string db_and_collection, Mongo.QueryFlags flags, uint32 skip, uint32 limit, Mongo.Bson query, Mongo.Bson field_selector, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool update_async (string db_and_collection, Mongo.UpdateFlags flags, Mongo.Bson selector, Mongo.Bson update, GLib.Cancellable? cancellable, out Mongo.Bson document) throws GLib.Error;
		[NoAccessorMethod]
		public bool fsync { get; construct; }
		public GLib.IOStream io_stream { get; construct; }
		[NoAccessorMethod]
		public bool journal { get; construct; }
		[NoAccessorMethod]
		public bool safe { get; construct; }
		[NoAccessorMethod]
		public int write_quorum { get; construct; }
		[NoAccessorMethod]
		public uint write_timeout { get; construct; }
		public signal void failed (GLib.Error object);
		public signal void message_read (Mongo.Message object);
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", type_id = "mongo_server_get_type ()")]
	public class Server : GLib.SocketService {
		[CCode (has_construct_function = false)]
		public Server ();
		public void pause_message (Mongo.Message message);
		public void unpause_message (Mongo.Message message);
		public virtual signal bool request_delete (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal void request_finished (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal bool request_getmore (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal bool request_insert (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal bool request_kill_cursors (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal bool request_msg (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal bool request_query (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal bool request_read (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal bool request_reply (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal void request_started (Mongo.ClientContext client, Mongo.Message message);
		public virtual signal bool request_update (Mongo.ClientContext client, Mongo.Message message);
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "mongo_write_concern_get_type ()")]
	[Compact]
	public class WriteConcern {
		[CCode (has_construct_function = false)]
		public WriteConcern ();
		public Mongo.Message build_getlasterror (string db_and_collection);
		public Mongo.WriteConcern copy ();
		public void free ();
		public int get_w ();
		public void set_fsync (bool _fsync);
		public void set_journal (bool journal);
		public void set_w (int w);
		public void set_w_majority ();
		public void set_w_tags (Mongo.Bson tags);
		public void set_wtimeoutms (uint wtimeoutms);
		[CCode (has_construct_function = false)]
		public WriteConcern.unsafe ();
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public struct BsonIter {
		public bool find (string key);
		public unowned string get_key ();
		public Mongo.Bson get_value_array ();
		public bool get_value_boolean ();
		public Mongo.Bson get_value_bson ();
		public GLib.DateTime get_value_date_time ();
		public double get_value_double ();
		public int32 get_value_int ();
		public int64 get_value_int64 ();
		public Mongo.ObjectId get_value_object_id ();
		public void get_value_regex (out unowned string regex, out unowned string options);
		public unowned string get_value_string (out size_t length);
		public GLib.TimeVal get_value_timeval ();
		public Mongo.BsonType get_value_type ();
		public void init (Mongo.Bson bson);
		public bool init_find (Mongo.Bson bson, string key);
		public bool is_key (string key);
		public bool next ();
		public bool recurse (out Mongo.BsonIter child);
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public enum BsonStreamError {
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cprefix = "MONGO_BSON_", type_id = "mongo_bson_type_get_type ()")]
	public enum BsonType {
		DOUBLE,
		UTF8,
		DOCUMENT,
		ARRAY,
		UNDEFINED,
		OBJECT_ID,
		BOOLEAN,
		DATE_TIME,
		NULL,
		REGEX,
		INT32,
		INT64
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public enum ClientError {
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public enum CollectionError {
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public enum ConnectionError {
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public enum DatabaseError {
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cprefix = "MONGO_DELETE_", type_id = "mongo_delete_flags_get_type ()")]
	[Flags]
	public enum DeleteFlags {
		NONE,
		SINGLE_REMOVE
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public enum InputStreamError {
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cprefix = "MONGO_INSERT_", type_id = "mongo_insert_flags_get_type ()")]
	[Flags]
	public enum InsertFlags {
		NONE,
		CONTINUE_ON_ERROR
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public enum MessageError {
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cprefix = "MONGO_OPERATION_", type_id = "mongo_operation_get_type ()")]
	public enum Operation {
		REPLY,
		MSG,
		UPDATE,
		INSERT,
		QUERY,
		GETMORE,
		DELETE,
		KILL_CURSORS;
		public static GLib.Type get_message_type (Mongo.Operation operation);
		public static bool is_known (Mongo.Operation operation);
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public enum OutputStreamError {
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", has_type_id = false)]
	public enum ProtocolError {
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cprefix = "MONGO_QUERY_", type_id = "mongo_query_flags_get_type ()")]
	[Flags]
	public enum QueryFlags {
		NONE,
		TAILABLE_CURSOR,
		SLAVE_OK,
		OPLOG_REPLAY,
		NO_CURSOR_TIMEOUT,
		AWAIT_DATA,
		EXHAUST,
		PARTIAL
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cprefix = "MONGO_REPLY_", type_id = "mongo_reply_flags_get_type ()")]
	[Flags]
	public enum ReplyFlags {
		NONE,
		CURSOR_NOT_FOUND,
		QUERY_FAILURE,
		SHARD_CONFIG_STALE,
		AWAIT_CAPABLE
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cprefix = "MONGO_UPDATE_", type_id = "mongo_update_flags_get_type ()")]
	[Flags]
	public enum UpdateFlags {
		NONE,
		UPSERT,
		MULTI_UPDATE
	}
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", instance_pos = 2.9)]
	public delegate bool CursorCallback (Mongo.Cursor cursor, Mongo.Bson bson);
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cname = "MONGO_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cname = "MONGO_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cname = "MONGO_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cname = "MONGO_VERSION_HEX")]
	public const int VERSION_HEX;
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h", cname = "MONGO_VERSION_S")]
	public const string VERSION_S;
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h")]
	public static void clear_bson (ref Mongo.Bson? bson);
	[CCode (cheader_filename = "mongo-glib/mongo-glib.h")]
	public static void clear_object_id (out Mongo.ObjectId object_id);
}
